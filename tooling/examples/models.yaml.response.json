{
  "booleanExpressionNames": {
    "author": "AuthorBooleanExpression",
    "article": "ArticleBooleanExpression"
  },
  "sdl": "schema  { query: QueryRoot }\n\ntype ArticleAggregate { avg: ArticleAggregateAvg\n  count: ArticleAggregateCount\n  nodes: [ArticleFields!]!\n  sum: ArticleAggregateSum\n}\n\ntype ArticleAggregateAvg { authorId: Int\n  id: Int\n}\n\ntype ArticleAggregateCount { authorId: Int!\n  content: Int!\n  id: Int!\n  title: Int!\n}\n\ntype ArticleAggregateSum { authorId: Int\n  id: Int\n}\n\ntype ArticleFields { author: AuthorFields\n  authorId: Int\n  content: String\n  id: Int\n  title: String\n}\n\ntype ArticleGroup { groupAggregate: ArticleAggregate!\n  groupKey: ArticleFields!\n}\n\ntype AuthorAggregate { avg: AuthorAggregateAvg\n  count: AuthorAggregateCount\n  nodes: [AuthorFields!]!\n  sum: AuthorAggregateSum\n}\n\ntype AuthorAggregateAvg { id: Int\n}\n\ntype AuthorAggregateCount { id: Int!\n  name: Int!\n}\n\ntype AuthorAggregateSum { id: Int\n}\n\ntype AuthorFields { articlesAggregate(where: AuthorBooleanExpression, limit: Int, offset: Int): AuthorAggregate!\n  articlesGroup(groupBy: [AuthorField!], where: AuthorBooleanExpression, limit: Int, offset: Int): [AuthorGroup!]!\n  articlesList(where: AuthorBooleanExpression, limit: Int, offset: Int): [AuthorFields!]!\n  id: Int\n  name: String\n}\n\ntype AuthorGroup { groupAggregate: AuthorAggregate!\n  groupKey: AuthorFields!\n}\n\ntype QueryRoot { articleAggregate(where: ArticleBooleanExpression, limit: Int, offset: Int): ArticleAggregate!\n  articleFindOneById: ArticleFields\n  articleGroup(groupBy: [ArticleField!], where: ArticleBooleanExpression, limit: Int, offset: Int): [ArticleGroup!]!\n  articleList(where: ArticleBooleanExpression, limit: Int, offset: Int): [ArticleFields!]!\n  authorAggregate(where: AuthorBooleanExpression, limit: Int, offset: Int): AuthorAggregate!\n  authorFindOneById: AuthorFields\n  authorGroup(groupBy: [AuthorField!], where: AuthorBooleanExpression, limit: Int, offset: Int): [AuthorGroup!]!\n  authorList(where: AuthorBooleanExpression, limit: Int, offset: Int): [AuthorFields!]!\n}\n\nenum ArticleField {AuthorId \n  Content \n  Id \n  Title \n}\n\nenum AuthorField {Id \n  Name \n}\n\ninput ArticleBooleanExpression {_and: [ArticleBooleanExpression!]\n  _not: ArticleBooleanExpression\n  _or: [ArticleBooleanExpression!]\n  author: AuthorBooleanExpression\n  authorId: IntComparisonExpression\n  content: StringComparisonExpression\n  id: IntComparisonExpression\n  title: StringComparisonExpression\n}\n\ninput AuthorBooleanExpression {_and: [AuthorBooleanExpression!]\n  _not: AuthorBooleanExpression\n  _or: [AuthorBooleanExpression!]\n  articles: ArticleBooleanExpression\n  id: IntComparisonExpression\n  name: StringComparisonExpression\n}\n\ninput IntComparisonExpression {_eq: Int\n}\n\ninput StringComparisonExpression {_eq: String\n}"
}
